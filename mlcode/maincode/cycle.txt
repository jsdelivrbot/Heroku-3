def cycle(count, numTrainingIterations, weightRange, pFlag = 'n'):
	errorCount = 0
	for i in range(0,count):
		if (pFlag == 'p'): print "CYCLE #",i+1,"/",count

		# This line allows for consistent results
		#random.seed(count)

		weights = weightRange * random.random((256, 1)) - weightRange/2

		#### Training ####
		for iteration in xrange(numTrainingIterations):
			output = sigmoid(inputArray, weights)
			product = (outputArray - output) * output * (1 - output)
			weights = weights + dot(inputArray.T, product)
			if (pFlag == 'b'): preciseTest(weights)
			if (pFlag == 'p'): print "\r",iteration,"/",numTrainingIterations,
			sys.stdout.flush()
		if (pFlag == 'p'): print "\r                                       \r",

		errorCount += roundedTest(inputArray, weights, outputArray, pFlag)
		
	print errorCount, "Errors /", count, "Cycles using", numTrainingIterations,
	print "Iterations", "and Weight Range", weightRange, "\n"
	print "----------------------------------------------------------"